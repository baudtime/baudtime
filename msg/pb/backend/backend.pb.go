// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: backend.proto

package backend

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pb "github.com/baudtime/baudtime/msg/pb"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MatchType int32

const (
	MatchType_MatchEqual     MatchType = 0
	MatchType_MatchNotEqual  MatchType = 1
	MatchType_MatchRegexp    MatchType = 2
	MatchType_MatchNotRegexp MatchType = 3
)

var MatchType_name = map[int32]string{
	0: "MatchEqual",
	1: "MatchNotEqual",
	2: "MatchRegexp",
	3: "MatchNotRegexp",
}
var MatchType_value = map[string]int32{
	"MatchEqual":     0,
	"MatchNotEqual":  1,
	"MatchRegexp":    2,
	"MatchNotRegexp": 3,
}

func (x MatchType) String() string {
	return proto.EnumName(MatchType_name, int32(x))
}
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_backend_46c6160745bca556, []int{0}
}

type Matcher struct {
	Type  MatchType `protobuf:"varint,1,opt,name=Type,proto3,enum=backend.MatchType" json:"Type,omitempty"`
	Name  string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Value string    `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *Matcher) Reset()         { *m = Matcher{} }
func (m *Matcher) String() string { return proto.CompactTextString(m) }
func (*Matcher) ProtoMessage()    {}
func (*Matcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_backend_46c6160745bca556, []int{0}
}
func (m *Matcher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Matcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Matcher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Matcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher.Merge(dst, src)
}
func (m *Matcher) XXX_Size() int {
	return m.Size()
}
func (m *Matcher) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher proto.InternalMessageInfo

func (m *Matcher) GetType() MatchType {
	if m != nil {
		return m.Type
	}
	return MatchType_MatchEqual
}

func (m *Matcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Matcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SelectRequest struct {
	Mint     int64      `protobuf:"zigzag64,1,opt,name=mint,proto3" json:"mint,omitempty"`
	Maxt     int64      `protobuf:"zigzag64,2,opt,name=maxt,proto3" json:"maxt,omitempty"`
	Interval int64      `protobuf:"zigzag64,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Matchers []*Matcher `protobuf:"bytes,4,rep,name=matchers" json:"matchers,omitempty"`
	SpanCtx  []byte     `protobuf:"bytes,5,opt,name=spanCtx,proto3" json:"spanCtx,omitempty"`
}

func (m *SelectRequest) Reset()         { *m = SelectRequest{} }
func (m *SelectRequest) String() string { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()    {}
func (*SelectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_backend_46c6160745bca556, []int{1}
}
func (m *SelectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SelectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectRequest.Merge(dst, src)
}
func (m *SelectRequest) XXX_Size() int {
	return m.Size()
}
func (m *SelectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SelectRequest proto.InternalMessageInfo

func (m *SelectRequest) GetMint() int64 {
	if m != nil {
		return m.Mint
	}
	return 0
}

func (m *SelectRequest) GetMaxt() int64 {
	if m != nil {
		return m.Maxt
	}
	return 0
}

func (m *SelectRequest) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *SelectRequest) GetMatchers() []*Matcher {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *SelectRequest) GetSpanCtx() []byte {
	if m != nil {
		return m.SpanCtx
	}
	return nil
}

type SelectResponse struct {
	Status   pb.StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=pb.StatusCode" json:"status,omitempty"`
	Series   []*pb.Series  `protobuf:"bytes,2,rep,name=series" json:"series,omitempty"`
	ErrorMsg string        `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *SelectResponse) Reset()         { *m = SelectResponse{} }
func (m *SelectResponse) String() string { return proto.CompactTextString(m) }
func (*SelectResponse) ProtoMessage()    {}
func (*SelectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_backend_46c6160745bca556, []int{2}
}
func (m *SelectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SelectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectResponse.Merge(dst, src)
}
func (m *SelectResponse) XXX_Size() int {
	return m.Size()
}
func (m *SelectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SelectResponse proto.InternalMessageInfo

func (m *SelectResponse) GetStatus() pb.StatusCode {
	if m != nil {
		return m.Status
	}
	return pb.StatusCode_Succeed
}

func (m *SelectResponse) GetSeries() []*pb.Series {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *SelectResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type AddRequest struct {
	Series []*pb.Series `protobuf:"bytes,1,rep,name=series" json:"series,omitempty"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_backend_46c6160745bca556, []int{3}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(dst, src)
}
func (m *AddRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetSeries() []*pb.Series {
	if m != nil {
		return m.Series
	}
	return nil
}

type LabelValuesRequest struct {
	Name     string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Matchers []*Matcher `protobuf:"bytes,2,rep,name=matchers" json:"matchers,omitempty"`
	SpanCtx  []byte     `protobuf:"bytes,3,opt,name=spanCtx,proto3" json:"spanCtx,omitempty"`
}

func (m *LabelValuesRequest) Reset()         { *m = LabelValuesRequest{} }
func (m *LabelValuesRequest) String() string { return proto.CompactTextString(m) }
func (*LabelValuesRequest) ProtoMessage()    {}
func (*LabelValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_backend_46c6160745bca556, []int{4}
}
func (m *LabelValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LabelValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelValuesRequest.Merge(dst, src)
}
func (m *LabelValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *LabelValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LabelValuesRequest proto.InternalMessageInfo

func (m *LabelValuesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelValuesRequest) GetMatchers() []*Matcher {
	if m != nil {
		return m.Matchers
	}
	return nil
}

func (m *LabelValuesRequest) GetSpanCtx() []byte {
	if m != nil {
		return m.SpanCtx
	}
	return nil
}

func init() {
	proto.RegisterType((*Matcher)(nil), "backend.Matcher")
	proto.RegisterType((*SelectRequest)(nil), "backend.SelectRequest")
	proto.RegisterType((*SelectResponse)(nil), "backend.SelectResponse")
	proto.RegisterType((*AddRequest)(nil), "backend.AddRequest")
	proto.RegisterType((*LabelValuesRequest)(nil), "backend.LabelValuesRequest")
	proto.RegisterEnum("backend.MatchType", MatchType_name, MatchType_value)
}
func (m *Matcher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Matcher) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackend(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBackend(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBackend(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *SelectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mint != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackend(dAtA, i, uint64((uint64(m.Mint)<<1)^uint64((m.Mint>>63))))
	}
	if m.Maxt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBackend(dAtA, i, uint64((uint64(m.Maxt)<<1)^uint64((m.Maxt>>63))))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBackend(dAtA, i, uint64((uint64(m.Interval)<<1)^uint64((m.Interval>>63))))
	}
	if len(m.Matchers) > 0 {
		for _, msg := range m.Matchers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBackend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SpanCtx) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBackend(dAtA, i, uint64(len(m.SpanCtx)))
		i += copy(dAtA[i:], m.SpanCtx)
	}
	return i, nil
}

func (m *SelectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBackend(dAtA, i, uint64(m.Status))
	}
	if len(m.Series) > 0 {
		for _, msg := range m.Series {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBackend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBackend(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Series) > 0 {
		for _, msg := range m.Series {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBackend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LabelValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBackend(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Matchers) > 0 {
		for _, msg := range m.Matchers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBackend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SpanCtx) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBackend(dAtA, i, uint64(len(m.SpanCtx)))
		i += copy(dAtA[i:], m.SpanCtx)
	}
	return i, nil
}

func encodeVarintBackend(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Matcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBackend(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBackend(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBackend(uint64(l))
	}
	return n
}

func (m *SelectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mint != 0 {
		n += 1 + sozBackend(uint64(m.Mint))
	}
	if m.Maxt != 0 {
		n += 1 + sozBackend(uint64(m.Maxt))
	}
	if m.Interval != 0 {
		n += 1 + sozBackend(uint64(m.Interval))
	}
	if len(m.Matchers) > 0 {
		for _, e := range m.Matchers {
			l = e.Size()
			n += 1 + l + sovBackend(uint64(l))
		}
	}
	l = len(m.SpanCtx)
	if l > 0 {
		n += 1 + l + sovBackend(uint64(l))
	}
	return n
}

func (m *SelectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovBackend(uint64(m.Status))
	}
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovBackend(uint64(l))
		}
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovBackend(uint64(l))
	}
	return n
}

func (m *AddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovBackend(uint64(l))
		}
	}
	return n
}

func (m *LabelValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBackend(uint64(l))
	}
	if len(m.Matchers) > 0 {
		for _, e := range m.Matchers {
			l = e.Size()
			n += 1 + l + sovBackend(uint64(l))
		}
	}
	l = len(m.SpanCtx)
	if l > 0 {
		n += 1 + l + sovBackend(uint64(l))
	}
	return n
}

func sovBackend(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBackend(x uint64) (n int) {
	return sovBackend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Matcher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Matcher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Matcher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MatchType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mint", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Mint = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Maxt = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Interval = int64(v)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matchers = append(m.Matchers, &Matcher{})
			if err := m.Matchers[len(m.Matchers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanCtx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanCtx = append(m.SpanCtx[:0], dAtA[iNdEx:postIndex]...)
			if m.SpanCtx == nil {
				m.SpanCtx = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (pb.StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, &pb.Series{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, &pb.Series{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matchers = append(m.Matchers, &Matcher{})
			if err := m.Matchers[len(m.Matchers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanCtx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanCtx = append(m.SpanCtx[:0], dAtA[iNdEx:postIndex]...)
			if m.SpanCtx == nil {
				m.SpanCtx = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBackend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBackend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBackend
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBackend
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBackend(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBackend = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBackend   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("backend.proto", fileDescriptor_backend_46c6160745bca556) }

var fileDescriptor_backend_46c6160745bca556 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbd, 0x72, 0xd3, 0x40,
	0x10, 0xf6, 0xd9, 0x8e, 0x9d, 0x6c, 0xb0, 0x31, 0x3b, 0x14, 0x1a, 0x17, 0x1a, 0xa3, 0x22, 0xe3,
	0x61, 0x82, 0xcc, 0x84, 0x27, 0x80, 0x0c, 0x1d, 0x49, 0x71, 0x66, 0x28, 0xa0, 0x3a, 0x59, 0x8b,
	0x22, 0xd0, 0xcf, 0x45, 0x77, 0x62, 0xc4, 0x5b, 0xd0, 0xf3, 0x42, 0x94, 0x29, 0x29, 0x19, 0xfb,
	0x45, 0x18, 0xad, 0x24, 0x07, 0x17, 0x14, 0xe9, 0xf6, 0xfb, 0xb9, 0xbd, 0xbd, 0x6f, 0x0f, 0x26,
	0x81, 0xda, 0x7c, 0xa5, 0x2c, 0xf4, 0x75, 0x91, 0xdb, 0x1c, 0xc7, 0x2d, 0x9c, 0x9f, 0x47, 0xb1,
	0xf5, 0xbf, 0x84, 0xfe, 0x26, 0x4f, 0x57, 0x81, 0x2a, 0x43, 0x1b, 0xa7, 0x74, 0x5f, 0xa4, 0x26,
	0x5a, 0xe9, 0x60, 0xa5, 0x83, 0xe6, 0xd8, 0xfc, 0x45, 0x14, 0xdb, 0x9b, 0x32, 0x60, 0x77, 0x94,
	0x47, 0xf9, 0x8a, 0xe9, 0xa0, 0xfc, 0xcc, 0x88, 0x01, 0x57, 0x8d, 0xdd, 0xfb, 0x04, 0xe3, 0x2b,
	0x65, 0x37, 0x37, 0x54, 0xe0, 0x19, 0x0c, 0xdf, 0x7f, 0xd7, 0xe4, 0x88, 0x85, 0x58, 0x4e, 0x2f,
	0xd0, 0xef, 0xc6, 0x61, 0xbd, 0x56, 0x24, 0xeb, 0x88, 0x30, 0xbc, 0x56, 0x29, 0x39, 0xfd, 0x85,
	0x58, 0x9e, 0x48, 0xae, 0xf1, 0x29, 0x1c, 0x7d, 0x50, 0x49, 0x49, 0xce, 0x80, 0xc9, 0x06, 0x78,
	0x3f, 0x05, 0x4c, 0xd6, 0x94, 0xd0, 0xc6, 0x4a, 0xba, 0x2d, 0xc9, 0xd8, 0xfa, 0x6c, 0x1a, 0x67,
	0x96, 0xef, 0x40, 0xc9, 0x35, 0x73, 0xaa, 0xb2, 0xdc, 0xaf, 0xe6, 0x54, 0x65, 0x71, 0x0e, 0xc7,
	0x71, 0x66, 0xa9, 0xf8, 0xa6, 0x12, 0x6e, 0x89, 0x72, 0x8f, 0xf1, 0x1c, 0x8e, 0xd3, 0x66, 0x64,
	0xe3, 0x0c, 0x17, 0x83, 0xe5, 0xe9, 0xc5, 0xec, 0x70, 0x56, 0x2a, 0xe4, 0xde, 0x81, 0x0e, 0x8c,
	0x8d, 0x56, 0xd9, 0xa5, 0xad, 0x9c, 0xa3, 0x85, 0x58, 0x3e, 0x92, 0x1d, 0xf4, 0x2a, 0x98, 0x76,
	0xc3, 0x19, 0x9d, 0x67, 0x86, 0xf0, 0x0c, 0x46, 0xc6, 0x2a, 0x5b, 0x9a, 0x36, 0x83, 0xa9, 0xaf,
	0x03, 0x7f, 0xcd, 0xcc, 0x65, 0x1e, 0x92, 0x6c, 0x55, 0xf4, 0x60, 0x64, 0xa8, 0x88, 0xc9, 0x38,
	0x7d, 0xbe, 0x1f, 0xd8, 0xc7, 0x8c, 0x6c, 0x95, 0xfa, 0x05, 0x54, 0x14, 0x79, 0x71, 0x65, 0xa2,
	0x36, 0x94, 0x3d, 0xf6, 0x5e, 0x02, 0xbc, 0x0e, 0xc3, 0x2e, 0x93, 0xfb, 0x6e, 0xe2, 0x7f, 0xdd,
	0x3c, 0x0d, 0xf8, 0x4e, 0x05, 0x94, 0x70, 0xae, 0xe6, 0x9f, 0x34, 0xb3, 0x7a, 0x13, 0xa2, 0xd9,
	0x44, 0x5d, 0x1f, 0xa4, 0xd3, 0x7f, 0x48, 0x3a, 0x83, 0x83, 0x74, 0x9e, 0xaf, 0xe1, 0x64, 0xbf,
	0x78, 0x9c, 0x02, 0x30, 0x78, 0x7b, 0x5b, 0xaa, 0x64, 0xd6, 0xc3, 0x27, 0x30, 0x61, 0x7c, 0x9d,
	0xdb, 0x86, 0x12, 0xf8, 0x18, 0x4e, 0x99, 0x92, 0x14, 0x51, 0xa5, 0x67, 0x7d, 0x44, 0x98, 0x76,
	0x9e, 0x96, 0x1b, 0xbc, 0x79, 0xf6, 0x6b, 0xeb, 0x8a, 0xbb, 0xad, 0x2b, 0xfe, 0x6c, 0x5d, 0xf1,
	0x63, 0xe7, 0xf6, 0xee, 0x76, 0x6e, 0xef, 0xf7, 0xce, 0xed, 0x7d, 0xec, 0x7e, 0x7b, 0x30, 0xe2,
	0x7f, 0xf9, 0xea, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x1d, 0x58, 0x7d, 0x0e, 0x03, 0x00,
	0x00,
}
