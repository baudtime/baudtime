// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: replication.proto

package backend

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pb "github.com/baudtime/baudtime/msg/pb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HandshakeStatus int32

const (
	HandshakeStatus_FailedToSync    HandshakeStatus = 0
	HandshakeStatus_NoLongerMySlave HandshakeStatus = 1
	HandshakeStatus_NewSlave        HandshakeStatus = 2
	HandshakeStatus_AlreadyMySlave  HandshakeStatus = 3
)

var HandshakeStatus_name = map[int32]string{
	0: "FailedToSync",
	1: "NoLongerMySlave",
	2: "NewSlave",
	3: "AlreadyMySlave",
}
var HandshakeStatus_value = map[string]int32{
	"FailedToSync":    0,
	"NoLongerMySlave": 1,
	"NewSlave":        2,
	"AlreadyMySlave":  3,
}

func (x HandshakeStatus) String() string {
	return proto.EnumName(HandshakeStatus_name, int32(x))
}
func (HandshakeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_replication_5608403d1009c1b9, []int{0}
}

type SlaveOfCommand struct {
	MasterAddr string `protobuf:"bytes,1,opt,name=masterAddr,proto3" json:"masterAddr,omitempty"`
}

func (m *SlaveOfCommand) Reset()         { *m = SlaveOfCommand{} }
func (m *SlaveOfCommand) String() string { return proto.CompactTextString(m) }
func (*SlaveOfCommand) ProtoMessage()    {}
func (*SlaveOfCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_replication_5608403d1009c1b9, []int{0}
}
func (m *SlaveOfCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveOfCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveOfCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SlaveOfCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveOfCommand.Merge(dst, src)
}
func (m *SlaveOfCommand) XXX_Size() int {
	return m.Size()
}
func (m *SlaveOfCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveOfCommand.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveOfCommand proto.InternalMessageInfo

func (m *SlaveOfCommand) GetMasterAddr() string {
	if m != nil {
		return m.MasterAddr
	}
	return ""
}

type SyncHandshake struct {
	SlaveAddr    string `protobuf:"bytes,1,opt,name=slaveAddr,proto3" json:"slaveAddr,omitempty"`
	BlocksMinT   int64  `protobuf:"zigzag64,2,opt,name=blocksMinT,proto3" json:"blocksMinT,omitempty"`
	SlaveOfNoOne bool   `protobuf:"varint,3,opt,name=slaveOfNoOne,proto3" json:"slaveOfNoOne,omitempty"`
}

func (m *SyncHandshake) Reset()         { *m = SyncHandshake{} }
func (m *SyncHandshake) String() string { return proto.CompactTextString(m) }
func (*SyncHandshake) ProtoMessage()    {}
func (*SyncHandshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_replication_5608403d1009c1b9, []int{1}
}
func (m *SyncHandshake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncHandshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncHandshake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SyncHandshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncHandshake.Merge(dst, src)
}
func (m *SyncHandshake) XXX_Size() int {
	return m.Size()
}
func (m *SyncHandshake) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncHandshake.DiscardUnknown(m)
}

var xxx_messageInfo_SyncHandshake proto.InternalMessageInfo

func (m *SyncHandshake) GetSlaveAddr() string {
	if m != nil {
		return m.SlaveAddr
	}
	return ""
}

func (m *SyncHandshake) GetBlocksMinT() int64 {
	if m != nil {
		return m.BlocksMinT
	}
	return 0
}

func (m *SyncHandshake) GetSlaveOfNoOne() bool {
	if m != nil {
		return m.SlaveOfNoOne
	}
	return false
}

type SyncHandshakeAck struct {
	Status     HandshakeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=backend.HandshakeStatus" json:"status,omitempty"`
	RelationID string          `protobuf:"bytes,2,opt,name=relationID,proto3" json:"relationID,omitempty"`
	Message    string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SyncHandshakeAck) Reset()         { *m = SyncHandshakeAck{} }
func (m *SyncHandshakeAck) String() string { return proto.CompactTextString(m) }
func (*SyncHandshakeAck) ProtoMessage()    {}
func (*SyncHandshakeAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_replication_5608403d1009c1b9, []int{2}
}
func (m *SyncHandshakeAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncHandshakeAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncHandshakeAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SyncHandshakeAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncHandshakeAck.Merge(dst, src)
}
func (m *SyncHandshakeAck) XXX_Size() int {
	return m.Size()
}
func (m *SyncHandshakeAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncHandshakeAck.DiscardUnknown(m)
}

var xxx_messageInfo_SyncHandshakeAck proto.InternalMessageInfo

func (m *SyncHandshakeAck) GetStatus() HandshakeStatus {
	if m != nil {
		return m.Status
	}
	return HandshakeStatus_FailedToSync
}

func (m *SyncHandshakeAck) GetRelationID() string {
	if m != nil {
		return m.RelationID
	}
	return ""
}

func (m *SyncHandshakeAck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BlockSyncOffset struct {
	Ulid   string `protobuf:"bytes,1,opt,name=ulid,proto3" json:"ulid,omitempty"`
	MinT   int64  `protobuf:"zigzag64,2,opt,name=minT,proto3" json:"minT,omitempty"`
	MaxT   int64  `protobuf:"zigzag64,3,opt,name=maxT,proto3" json:"maxT,omitempty"`
	Path   string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Offset int64  `protobuf:"zigzag64,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (m *BlockSyncOffset) Reset()         { *m = BlockSyncOffset{} }
func (m *BlockSyncOffset) String() string { return proto.CompactTextString(m) }
func (*BlockSyncOffset) ProtoMessage()    {}
func (*BlockSyncOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_replication_5608403d1009c1b9, []int{3}
}
func (m *BlockSyncOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockSyncOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockSyncOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockSyncOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockSyncOffset.Merge(dst, src)
}
func (m *BlockSyncOffset) XXX_Size() int {
	return m.Size()
}
func (m *BlockSyncOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockSyncOffset.DiscardUnknown(m)
}

var xxx_messageInfo_BlockSyncOffset proto.InternalMessageInfo

func (m *BlockSyncOffset) GetUlid() string {
	if m != nil {
		return m.Ulid
	}
	return ""
}

func (m *BlockSyncOffset) GetMinT() int64 {
	if m != nil {
		return m.MinT
	}
	return 0
}

func (m *BlockSyncOffset) GetMaxT() int64 {
	if m != nil {
		return m.MaxT
	}
	return 0
}

func (m *BlockSyncOffset) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *BlockSyncOffset) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SyncHeartbeat struct {
	MasterAddr    string           `protobuf:"bytes,1,opt,name=masterAddr,proto3" json:"masterAddr,omitempty"`
	SlaveAddr     string           `protobuf:"bytes,2,opt,name=slaveAddr,proto3" json:"slaveAddr,omitempty"`
	RelationID    string           `protobuf:"bytes,3,opt,name=relationID,proto3" json:"relationID,omitempty"`
	BlkSyncOffset *BlockSyncOffset `protobuf:"bytes,4,opt,name=blkSyncOffset" json:"blkSyncOffset,omitempty"`
}

func (m *SyncHeartbeat) Reset()         { *m = SyncHeartbeat{} }
func (m *SyncHeartbeat) String() string { return proto.CompactTextString(m) }
func (*SyncHeartbeat) ProtoMessage()    {}
func (*SyncHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_replication_5608403d1009c1b9, []int{4}
}
func (m *SyncHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SyncHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncHeartbeat.Merge(dst, src)
}
func (m *SyncHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *SyncHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_SyncHeartbeat proto.InternalMessageInfo

func (m *SyncHeartbeat) GetMasterAddr() string {
	if m != nil {
		return m.MasterAddr
	}
	return ""
}

func (m *SyncHeartbeat) GetSlaveAddr() string {
	if m != nil {
		return m.SlaveAddr
	}
	return ""
}

func (m *SyncHeartbeat) GetRelationID() string {
	if m != nil {
		return m.RelationID
	}
	return ""
}

func (m *SyncHeartbeat) GetBlkSyncOffset() *BlockSyncOffset {
	if m != nil {
		return m.BlkSyncOffset
	}
	return nil
}

type SyncHeartbeatAck struct {
	Status        pb.StatusCode    `protobuf:"varint,1,opt,name=status,proto3,enum=pb.StatusCode" json:"status,omitempty"`
	Message       string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	BlkSyncOffset *BlockSyncOffset `protobuf:"bytes,3,opt,name=blkSyncOffset" json:"blkSyncOffset,omitempty"`
	Data          []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SyncHeartbeatAck) Reset()         { *m = SyncHeartbeatAck{} }
func (m *SyncHeartbeatAck) String() string { return proto.CompactTextString(m) }
func (*SyncHeartbeatAck) ProtoMessage()    {}
func (*SyncHeartbeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_replication_5608403d1009c1b9, []int{5}
}
func (m *SyncHeartbeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncHeartbeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncHeartbeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SyncHeartbeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncHeartbeatAck.Merge(dst, src)
}
func (m *SyncHeartbeatAck) XXX_Size() int {
	return m.Size()
}
func (m *SyncHeartbeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncHeartbeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_SyncHeartbeatAck proto.InternalMessageInfo

func (m *SyncHeartbeatAck) GetStatus() pb.StatusCode {
	if m != nil {
		return m.Status
	}
	return pb.StatusCode_Succeed
}

func (m *SyncHeartbeatAck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SyncHeartbeatAck) GetBlkSyncOffset() *BlockSyncOffset {
	if m != nil {
		return m.BlkSyncOffset
	}
	return nil
}

func (m *SyncHeartbeatAck) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SlaveOfCommand)(nil), "backend.SlaveOfCommand")
	proto.RegisterType((*SyncHandshake)(nil), "backend.SyncHandshake")
	proto.RegisterType((*SyncHandshakeAck)(nil), "backend.SyncHandshakeAck")
	proto.RegisterType((*BlockSyncOffset)(nil), "backend.BlockSyncOffset")
	proto.RegisterType((*SyncHeartbeat)(nil), "backend.SyncHeartbeat")
	proto.RegisterType((*SyncHeartbeatAck)(nil), "backend.SyncHeartbeatAck")
	proto.RegisterEnum("backend.HandshakeStatus", HandshakeStatus_name, HandshakeStatus_value)
}
func (m *SlaveOfCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveOfCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MasterAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.MasterAddr)))
		i += copy(dAtA[i:], m.MasterAddr)
	}
	return i, nil
}

func (m *SyncHandshake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncHandshake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SlaveAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.SlaveAddr)))
		i += copy(dAtA[i:], m.SlaveAddr)
	}
	if m.BlocksMinT != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReplication(dAtA, i, uint64((uint64(m.BlocksMinT)<<1)^uint64((m.BlocksMinT>>63))))
	}
	if m.SlaveOfNoOne {
		dAtA[i] = 0x18
		i++
		if m.SlaveOfNoOne {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SyncHandshakeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncHandshakeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplication(dAtA, i, uint64(m.Status))
	}
	if len(m.RelationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.RelationID)))
		i += copy(dAtA[i:], m.RelationID)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *BlockSyncOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockSyncOffset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ulid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.Ulid)))
		i += copy(dAtA[i:], m.Ulid)
	}
	if m.MinT != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReplication(dAtA, i, uint64((uint64(m.MinT)<<1)^uint64((m.MinT>>63))))
	}
	if m.MaxT != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReplication(dAtA, i, uint64((uint64(m.MaxT)<<1)^uint64((m.MaxT>>63))))
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Offset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintReplication(dAtA, i, uint64((uint64(m.Offset)<<1)^uint64((m.Offset>>63))))
	}
	return i, nil
}

func (m *SyncHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MasterAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.MasterAddr)))
		i += copy(dAtA[i:], m.MasterAddr)
	}
	if len(m.SlaveAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.SlaveAddr)))
		i += copy(dAtA[i:], m.SlaveAddr)
	}
	if len(m.RelationID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.RelationID)))
		i += copy(dAtA[i:], m.RelationID)
	}
	if m.BlkSyncOffset != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintReplication(dAtA, i, uint64(m.BlkSyncOffset.Size()))
		n1, err := m.BlkSyncOffset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SyncHeartbeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncHeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplication(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.BlkSyncOffset != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintReplication(dAtA, i, uint64(m.BlkSyncOffset.Size()))
		n2, err := m.BlkSyncOffset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintReplication(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintReplication(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SlaveOfCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MasterAddr)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *SyncHandshake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlaveAddr)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.BlocksMinT != 0 {
		n += 1 + sozReplication(uint64(m.BlocksMinT))
	}
	if m.SlaveOfNoOne {
		n += 2
	}
	return n
}

func (m *SyncHandshakeAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovReplication(uint64(m.Status))
	}
	l = len(m.RelationID)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *BlockSyncOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ulid)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.MinT != 0 {
		n += 1 + sozReplication(uint64(m.MinT))
	}
	if m.MaxT != 0 {
		n += 1 + sozReplication(uint64(m.MaxT))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sozReplication(uint64(m.Offset))
	}
	return n
}

func (m *SyncHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MasterAddr)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	l = len(m.SlaveAddr)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	l = len(m.RelationID)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.BlkSyncOffset != nil {
		l = m.BlkSyncOffset.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func (m *SyncHeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovReplication(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	if m.BlkSyncOffset != nil {
		l = m.BlkSyncOffset.Size()
		n += 1 + l + sovReplication(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovReplication(uint64(l))
	}
	return n
}

func sovReplication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReplication(x uint64) (n int) {
	return sovReplication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SlaveOfCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveOfCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveOfCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncHandshake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncHandshake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncHandshake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlaveAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksMinT", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.BlocksMinT = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveOfNoOne", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveOfNoOne = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncHandshakeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncHandshakeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncHandshakeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (HandshakeStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockSyncOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockSyncOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockSyncOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ulid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ulid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinT", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.MinT = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxT", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.MaxT = int64(v)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Offset = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlaveAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlkSyncOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlkSyncOffset == nil {
				m.BlkSyncOffset = &BlockSyncOffset{}
			}
			if err := m.BlkSyncOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncHeartbeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncHeartbeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncHeartbeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (pb.StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlkSyncOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlkSyncOffset == nil {
				m.BlkSyncOffset = &BlockSyncOffset{}
			}
			if err := m.BlkSyncOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReplication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReplication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReplication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReplication(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReplication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplication   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("replication.proto", fileDescriptor_replication_5608403d1009c1b9) }

var fileDescriptor_replication_5608403d1009c1b9 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x26, 0xa5, 0x6d, 0x86, 0x34, 0x09, 0x8b, 0x84, 0x2c, 0x84, 0xac, 0xe0, 0x03, 0x8a,
	0x10, 0x72, 0x2a, 0xb8, 0x23, 0xa5, 0x45, 0x08, 0x24, 0x9a, 0x48, 0x4e, 0x4e, 0xbd, 0x8d, 0xbd,
	0x9b, 0xd4, 0xc4, 0xf6, 0x1a, 0xef, 0x06, 0x9a, 0x0b, 0xdf, 0xc0, 0x67, 0x70, 0xe1, 0x3f, 0x38,
	0xf6, 0xc8, 0x11, 0x25, 0x3f, 0x82, 0x76, 0xed, 0x34, 0x76, 0x8a, 0x84, 0xb8, 0xcd, 0x3e, 0xbf,
	0x9d, 0x7d, 0xf3, 0x9e, 0x07, 0x1e, 0x64, 0x3c, 0x8d, 0xc2, 0x00, 0x55, 0x28, 0x12, 0x37, 0xcd,
	0x84, 0x12, 0xf4, 0xc8, 0xc7, 0x60, 0xc1, 0x13, 0xf6, 0xf8, 0xc5, 0x3c, 0x54, 0xee, 0x47, 0xe6,
	0x06, 0x22, 0x1e, 0xf8, 0xb8, 0x64, 0x2a, 0x8c, 0xf9, 0xae, 0x88, 0xe5, 0x7c, 0x90, 0xfa, 0x83,
	0xd4, 0xcf, 0xaf, 0x39, 0xa7, 0xd0, 0x9e, 0x44, 0xf8, 0x99, 0x8f, 0x67, 0xe7, 0x22, 0x8e, 0x31,
	0x61, 0xd4, 0x06, 0x88, 0x51, 0x2a, 0x9e, 0x0d, 0x19, 0xcb, 0x2c, 0xd2, 0x23, 0xfd, 0xa6, 0x57,
	0x42, 0x9c, 0x4f, 0x70, 0x32, 0x59, 0x25, 0xc1, 0x3b, 0x4c, 0x98, 0xbc, 0xc2, 0x05, 0xa7, 0x4f,
	0xa0, 0x29, 0x75, 0x8b, 0x12, 0x7f, 0x07, 0xe8, 0x76, 0x7e, 0x24, 0x82, 0x85, 0xbc, 0x08, 0x93,
	0xa9, 0x55, 0xef, 0x91, 0x3e, 0xf5, 0x4a, 0x08, 0x75, 0xa0, 0x25, 0x73, 0x01, 0x23, 0x31, 0x4e,
	0xb8, 0xd5, 0xe8, 0x91, 0xfe, 0xb1, 0x57, 0xc1, 0x9c, 0xaf, 0xd0, 0xad, 0x3c, 0x39, 0x0c, 0x16,
	0xf4, 0x14, 0x0e, 0xa5, 0x42, 0xb5, 0x94, 0xe6, 0xc9, 0xf6, 0x4b, 0xcb, 0x2d, 0x0c, 0x70, 0x6f,
	0x69, 0x13, 0xf3, 0xdd, 0x2b, 0x78, 0x5a, 0x49, 0xc6, 0x23, 0xe3, 0xd9, 0xfb, 0x37, 0x46, 0x49,
	0xd3, 0x2b, 0x21, 0xd4, 0x82, 0xa3, 0x98, 0x4b, 0x89, 0xf3, 0x5c, 0x44, 0xd3, 0xdb, 0x1e, 0x9d,
	0x15, 0x74, 0xce, 0xb4, 0x62, 0x2d, 0x62, 0x3c, 0x9b, 0x49, 0xae, 0x28, 0x85, 0x83, 0x65, 0x14,
	0xb2, 0x62, 0x5e, 0x53, 0x6b, 0x2c, 0xde, 0x0d, 0x69, 0x6a, 0x83, 0xe1, 0xf5, 0xd4, 0x74, 0xd4,
	0x18, 0x5e, 0x1b, 0x2c, 0x45, 0x75, 0x65, 0x1d, 0xe4, 0x77, 0x75, 0x4d, 0x1f, 0xc1, 0x61, 0xde,
	0xd9, 0xba, 0x67, 0x98, 0xc5, 0xc9, 0xf9, 0x41, 0x0a, 0xbb, 0x39, 0x66, 0xca, 0xe7, 0xa8, 0xfe,
	0x95, 0x4f, 0x35, 0x8e, 0xfa, 0x5f, 0xe2, 0x28, 0x99, 0xd0, 0xb8, 0x63, 0xc2, 0x6b, 0x38, 0xf1,
	0xa3, 0xd2, 0xa0, 0x46, 0xe4, 0xfd, 0x92, 0xbb, 0x7b, 0x46, 0x78, 0x55, 0xba, 0xf3, 0x9d, 0x14,
	0x59, 0x6d, 0xf5, 0xea, 0xac, 0x9e, 0xed, 0x65, 0xd5, 0x76, 0x53, 0xdf, 0xcd, 0xd3, 0x39, 0x17,
	0x8c, 0xdf, 0x26, 0x54, 0x4a, 0xa0, 0x5e, 0x49, 0xe0, 0xae, 0xac, 0xc6, 0x7f, 0xc9, 0xd2, 0x96,
	0x33, 0x54, 0x68, 0xa6, 0x69, 0x79, 0xa6, 0x7e, 0x7e, 0x09, 0x9d, 0xbd, 0x5f, 0x85, 0x76, 0xa1,
	0xf5, 0x16, 0xc3, 0x88, 0xb3, 0xa9, 0xd0, 0x97, 0xbb, 0x35, 0xfa, 0x10, 0x3a, 0x23, 0xf1, 0x41,
	0x24, 0x73, 0x9e, 0x5d, 0xac, 0xcc, 0xa6, 0x74, 0x09, 0x6d, 0xc1, 0xf1, 0x88, 0x7f, 0xc9, 0x4f,
	0x75, 0x4a, 0xa1, 0x3d, 0x8c, 0x32, 0x8e, 0x6c, 0xb5, 0x65, 0x34, 0xce, 0x9e, 0xfe, 0x5c, 0xdb,
	0xe4, 0x66, 0x6d, 0x93, 0xdf, 0x6b, 0x9b, 0x7c, 0xdb, 0xd8, 0xb5, 0x9b, 0x8d, 0x5d, 0xfb, 0xb5,
	0xb1, 0x6b, 0x97, 0xdb, 0x3d, 0xf5, 0x0f, 0xcd, 0x02, 0xbe, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0xd6, 0x1a, 0x03, 0xcc, 0x03, 0x00, 0x00,
}
